service: dynamodb-crud-api

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.usersTableName}

custom:
  usersTableName: users-table-${self:provider.stage}
  dynamodb:
    stages:
      - dev
    start:
      migrate: true
  serverless-offline:
    resourceRoutes: true

plugins:
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

functions:
  getAllUsers:
    handler: handler.getAllUsers
    name: get-all-users
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: users
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt UsersTable.Arn
  getUser:
    handler: handler.getUser
    name: get-user
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: user/{userId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt UsersTable.Arn
  createUser:
    handler: handler.createUser
    name: creat-user
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: user
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt UsersTable.Arn
  updateUser:
    handler: handler.updateUser
    name: update-user
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: user/{userId}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
        Resource: !GetAtt UsersTable.Arn
  deleteUser:
    handler: handler.deleteUser
    name: delete-user
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: user/{userId}
          method: DELETE
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: !GetAtt UsersTable.Arn

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
